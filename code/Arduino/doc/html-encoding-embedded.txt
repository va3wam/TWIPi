After removing // style comments, eliminating blank lines, and running it through Minify...


<!DOCTYPE html> <html> <head> <meta charset="utf-8"/> <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"> <title>SBS Mark2 Remote Home Page</title> <style>"body{background-color: #808080; font-family: Arial, Helvetica, Sans-Serif; Color: #000000;}" </style> <script type="text/javascript" > var websock; function start(){websock=new WebSocket('ws://' + window.location.hostname + ':81/'); websock.onopen=function(evt){console.log('websock open');}; websock.onclose=function(evt){console.log('websock close');}; websock.onerror=function(evt){console.log(evt);}; websock.onmessage=function(evt){console.log('[SegbotSTEP] evt=' + evt.data); var msg=JSON.parse(evt.data); console.log('[SegbotSTEP] msg.item=' + msg.item); if (msg.item==='LED'){var e=document.getElementById('ledstatus'); console.log('[SegbotSTEP] msg.value=' + msg.value); if (msg.value==='ledon'){e.style.color='red'; console.log('[SegbotSTEP] set ledstatus color to red');}else if (msg.value==='ledoff'){e.style.color='black'; console.log('[SegbotSTEP] set ledstatus color to black');}else{console.log('[SegbotSTEP] unknown LED value. evt.data=' + evt.data); item unknow}}else if (msg.item==='LCD'){var e1=document.getElementById('lcd1'); var e2=document.getElementById('lcd2'); console.log('[SegbotSTEP] update LCD line 1 with ' + msg.line1); console.log('[SegbotSTEP] update LCD line 2 with ' + msg.line2); e1.value=msg.line1; e2.value=msg.line2;}else if (msg.item==='ping'){websock.send(evt.data);}else if (msg.item==='balGraph'){console.log('[SegbotSTEP] Web client does not support graphing, ignore message');}else{console.log('[SegbotSTEP] unknown item (case sensative). evt.data=' + evt.data);}};}function ledControl(e){var msg={item: "LED", action: "set", value: e.id}; websock.send(JSON.stringify(msg)); console.log('[SegbotSTEP] sent this to server: ' + JSON.stringify(msg));}function lcdControl(e){if (e.id==='getlcd'){var x="get";}else{var x="set";}var l1=document.getElementById('lcd1'); var l2=document.getElementById('lcd2'); var msg={item: "LCD", action: x, line1: l1.value, line2: l2.value}; websock.send(JSON.stringify(msg)); console.log('[SegbotSTEP] sent this to server: ' + JSON.stringify(msg));}</script> </head> <body onload="javascript:start();"> <h1>SBS Mark2 Web-Based Control Center</h1> Note: Balancing telemetry graph intentionally not included here due to complications serving up onjects such as canvasjs from the ESP32 <div id="ledstatus"><b>LED</b></div><button id="ledon" type="button" onclick="ledControl(this);">On</button> <button id="ledoff" type="button" onclick="ledControl(this);">Off</button> <p><b>1650 LCD</b><br><input type="text" id="lcd1" style="background:GreenYellow; color:black;text-align:center;" maxlength="16"/><br><input type="text" id="lcd2" style="background:GreenYellow; color:black;text-align:center;" maxlength="16"/><br><button id="getlcd" type="button" onclick="lcdControl(this);">Get</button> <button id="setlcd" type="button" onclick="lcdControl(this);">Set</button> </body> </html>



After using Text -> C/C++ string converter...

"<!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"/> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\"> <title>SBS Mark2 Remote Home Page</title> <style>\"body{background-color: #808080; font-family: Arial, Helvetica, Sans-Serif; Color: #000000;}\" </style> <script type=\"text/javascript\" > var websock; function start(){websock=new WebSocket('ws://' + window.location.hostname + ':81/'); websock.onopen=function(evt){console.log('websock open');}; websock.onclose=function(evt){console.log('websock close');}; websock.onerror=function(evt){console.log(evt);}; websock.onmessage=function(evt){console.log('[SegbotSTEP] evt=' + evt.data); var msg=JSON.parse(evt.data); console.log('[SegbotSTEP] msg.item=' + msg.item); if (msg.item==='LED'){var e=document.getElementById('ledstatus'); console.log('[SegbotSTEP] msg.value=' + msg.value); if (msg.value==='ledon'){e.style.color='red'; console.log('[SegbotSTEP] set ledstatus color to red');}else if (msg.value==='ledoff'){e.style.color='black'; console.log('[SegbotSTEP] set ledstatus color to black');}else{console.log('[SegbotSTEP] unknown LED value. evt.data=' + evt.data); item unknow}}else if (msg.item==='LCD'){var e1=document.getElementById('lcd1'); var e2=document.getElementById('lcd2'); console.log('[SegbotSTEP] update LCD line 1 with ' + msg.line1); console.log('[SegbotSTEP] update LCD line 2 with ' + msg.line2); e1.value=msg.line1; e2.value=msg.line2;}else if (msg.item==='ping'){websock.send(evt.data);}else if (msg.item==='balGraph'){console.log('[SegbotSTEP] Web client does not support graphing, ignore message');}else{console.log('[SegbotSTEP] unknown item (case sensative). evt.data=' + evt.data);}};}function ledControl(e){var msg={item: \"LED\", action: \"set\", value: e.id}; websock.send(JSON.stringify(msg)); console.log('[SegbotSTEP] sent this to server: ' + JSON.stringify(msg));}function lcdControl(e){if (e.id==='getlcd'){var x=\"get\";}else{var x=\"set\";}var l1=document.getElementById('lcd1'); var l2=document.getElementById('lcd2'); var msg={item: \"LCD\", action: x, line1: l1.value, line2: l2.value}; websock.send(JSON.stringify(msg)); console.log('[SegbotSTEP] sent this to server: ' + JSON.stringify(msg));}</script> </head> <body onload=\"javascript:start();\"> <h1>SBS Mark2 Web-Based Control Center</h1> Note: Balancing telemetry graph intentionally not included here due to complications serving up onjects such as canvasjs from the ESP32 <div id=\"ledstatus\"><b>LED</b></div><button id=\"ledon\" type=\"button\" onclick=\"ledControl(this);\">On</button> <button id=\"ledoff\" type=\"button\" onclick=\"ledControl(this);\">Off</button> <p><b>1650 LCD</b><br><input type=\"text\" id=\"lcd1\" style=\"background:GreenYellow; color:black;text-align:center;\" maxlength=\"16\"/><br><input type=\"text\" id=\"lcd2\" style=\"background:GreenYellow; color:black;text-align:center;\" maxlength=\"16\"/><br><button id=\"getlcd\" type=\"button\" onclick=\"lcdControl(this);\">Get</button> <button id=\"setlcd\" type=\"button\" onclick=\"lcdControl(this);\">Set</button> </body> </html>\n"